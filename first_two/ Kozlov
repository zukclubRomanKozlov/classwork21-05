import socket
SERVER_ADDRESS = ('localhost', 8686)
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(SERVER_ADDRESS)
server_socket.listen(10)
print('server is running, please, press ctrl+c to stop')
while True:
    connection, address = server_socket.accept()
    print("new connection from {address}".format(address=address))
    data = connection.recv(1024)
    print(str(data))
    connection.send(bytes('Hello from server!', encoding='UTF-8'))
    connection.close()

import socket
MAX_CONNECTIONS = 10
address_to_server = ('localhost', 8686)
clients = [socket.socket(socket.AF_INET, socket.SOCK_STREAM) for i in range(MAX_CONNECTIONS)]
for client in clients:
    client.connect(address_to_server)
for i in range(MAX_CONNECTIONS):
    clients[i].send(bytes("hello from client number " + str(i), encoding='UTF-8'))
for client in clients:
    data = client.recv(1024)
    print(str(data))
import socket 
import threading class 
ThreadedServer(object): 
def __init__(self, host, port): 
self.host = host self.port = port self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
self.sock.bind((self.host, self.port)) 
def listen(self): self.sock.listen(5) 
while True:
 client, address = self.sock.accept() 
client.settimeout(60) threading.Thread(target = self.listenToClient,args = (client,address)).start() 
def 
listenToClient(self, client, address): 
size = 1024 
while True:
 try:
 data = client.recv(size)
 if data:
  data client.send(response)
 else: 
raise error('Client disconnected') 
except: client.close() 
return
 False 
if __name__ == "__main__":
 while True:
 port_num = input("Port? ") 
try: port_num = int(port_num) 
break except ValueError:
 pass ThreadedServer('',port_num).listen() 
